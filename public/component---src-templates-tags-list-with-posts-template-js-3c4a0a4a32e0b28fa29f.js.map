{"version":3,"sources":["webpack:///./src/templates/tags-list-with-posts-template.js"],"names":["TagsPostsListTemplate","useSiteMetadata","title","subtitle","tags","useTagsList","allPostEdges","usePostsList","processedList","map","tag","filteredList","item","fieldValue","toLowerCase","index","length","totalCount","push","sortedList","obj","getPostsByTag","node","frontmatter","description","to","kebabCase","fields","slug"],"mappings":"+QA6DeA,UAlDe,WAAO,IAAD,EACJC,cAApBC,EADwB,EACxBA,MAAOC,EADiB,EACjBA,SACTC,EAAOC,cACPC,EAAeC,cACjBC,EAAgB,GACpBJ,GAAQA,EAAKK,KAAI,SAACC,GACd,IAAMC,EAAe,IAASH,GAAe,SAACI,GAAD,OAAmB,MAARA,GAAuB,MAAPF,GAAeE,EAAKC,WAAWC,eAAiBJ,EAAIG,WAAWC,iBACnIC,EAAQ,IAAYP,GAAe,SAACI,GAAD,OAAmB,MAARA,GAAuB,MAAPF,GAAeE,EAAKC,WAAWC,eAAiBJ,EAAIG,WAAWC,iBAC7HH,EAAaK,OAAS,EACtBR,EAAcO,GAAS,CACnBF,WAAYF,EAAa,GAAGE,WAC5BI,WAAYN,EAAa,GAAGM,WAAaP,EAAIO,YAGjDT,EAAcU,KAAK,CACfL,WAAYH,EAAIG,WAAWC,cAC3BG,WAAYP,EAAIO,gBAI5B,IAAME,EAAa,IAASX,GAAe,SAAAY,GAAG,OAAIA,EAAIP,cAChDQ,EAAgB,SAACX,GAGnB,OADsB,IAASJ,GAAc,gBAAGgB,EAAH,EAAGA,KAAH,OAAcA,EAAKC,YAAYnB,MAAQ,IAAYkB,EAAKC,YAAYnB,MAAM,SAACQ,GAAD,OAAmB,MAARA,GAAgBA,EAAKE,eAAiBJ,EAAII,kBAAiB,MAIjM,OACI,eAAC,IAAD,CAAQZ,MAAK,UAAYA,EAASsB,YAAarB,EAA/C,UACI,cAAC,IAAD,IACA,cAAC,IAAD,CAAMD,MAAM,OAAZ,SACI,6BACKiB,GAAcA,EAAWV,KAAI,SAACC,GAAD,OAC1B,+BACI,eAAC,OAAD,CAAMe,GAAE,QAAUC,IAAUhB,EAAIG,YAAxB,IAAR,UACKH,EAAIG,WADT,KACuBH,EAAIO,WAD3B,OAGA,6BACKI,EAAcX,EAAIG,YAAYJ,KAAI,gBAAGa,EAAH,EAAGA,KAAH,OAC/B,cAAC,OAAD,CAA6BG,GAAIH,EAAKK,OAAOC,KAA7C,SAAmD,6BAAKN,EAAKC,YAAYrB,SAA9DoB,EAAKK,OAAOC,aAN1BlB,EAAIG","file":"component---src-templates-tags-list-with-posts-template-js-3c4a0a4a32e0b28fa29f.js","sourcesContent":["// @flow strict\r\nimport React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport kebabCase from 'lodash/kebabCase';\r\nimport filter from 'lodash/filter';\r\nimport Layout from '../components/Layout';\r\nimport Sidebar from '../components/Sidebar';\r\nimport Page from '../components/Page';\r\nimport { useSiteMetadata, useTagsList, usePostsList } from '../hooks';\r\nimport _ from 'lodash';\r\n\r\nconst TagsPostsListTemplate = () => {\r\n    const { title, subtitle } = useSiteMetadata();\r\n    const tags = useTagsList();\r\n    const allPostEdges = usePostsList();\r\n    let processedList = [];\r\n    tags && tags.map((tag) => {\r\n        const filteredList = _.filter(processedList, (item) => (item != null && tag != null && item.fieldValue.toLowerCase() == tag.fieldValue.toLowerCase()))\r\n        var index = _.findIndex(processedList, (item) => (item != null && tag != null && item.fieldValue.toLowerCase() == tag.fieldValue.toLowerCase()))\r\n        if (filteredList.length > 0) {//means the tag is already present. Just add the count\r\n            processedList[index] = {\r\n                fieldValue: filteredList[0].fieldValue,\r\n                totalCount: filteredList[0].totalCount + tag.totalCount\r\n            }\r\n        } else {\r\n            processedList.push({\r\n                fieldValue: tag.fieldValue.toLowerCase(),\r\n                totalCount: tag.totalCount\r\n            })\r\n        }\r\n    })\r\n    const sortedList = _.sortBy(processedList, obj => obj.fieldValue)\r\n    const getPostsByTag = (tag) => {\r\n        //filter from trimmed and lowercase\r\n        const filteredPosts = _.filter(allPostEdges, ({ node }) => node.frontmatter.tags && _.findIndex(node.frontmatter.tags, (item) => (item != null && item.toLowerCase() == tag.toLowerCase()))>=0)\r\n        return filteredPosts\r\n    }\r\n    \r\n    return (\r\n        <Layout title={`Tags - ${title}`} description={subtitle}>\r\n            <Sidebar />\r\n            <Page title=\"Tags\">\r\n                <ul>\r\n                    {sortedList && sortedList.map((tag) => ( \r\n                        <li key={tag.fieldValue}>\r\n                            <Link to={`/tag/${kebabCase(tag.fieldValue)}/`}>\r\n                                {tag.fieldValue} ({tag.totalCount})\r\n                            </Link>\r\n                            <ul>\r\n                                {getPostsByTag(tag.fieldValue).map(({ node }) => (\r\n                                    <Link key={node.fields.slug} to={node.fields.slug}><li>{node.frontmatter.title}</li></Link>\r\n                                ))}\r\n                            </ul>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </Page>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default TagsPostsListTemplate;\r\n"],"sourceRoot":""}